buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
         flatDir {
            dirs System.getProperty("user.dir") + '/libs'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath 'com.google.gms:google-services:4.3.15'
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://maven.google.com" }

    flatDir {
        dirs System.getProperty("user.dir") + '/libs'
    }
}

apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'         // Optional??
    implementation 'com.google.android.gms:play-services-base:17.0.0'  // Mandatory - Firebase rely on Google Play services

    // For Google Analytics support
    implementation 'com.google.firebase:firebase-core:17.2.0'         // Recommended package
    // implementation 'com.google.firebase:firebase-analytics:12.+' // deprecated

    // For RemoteConfig support
    implementation 'com.google.firebase:firebase-config:16.0.0'

    // For Messaging support
    implementation 'com.google.firebase.messaging.cpp:firebase_messaging_cpp@aar'
    implementation 'com.google.firebase:firebase-messaging:17.1.0'

    // For Auth support
    implementation 'com.google.firebase:firebase-auth:16.0.2'

    // For Database support
    implementation 'com.google.firebase:firebase-database:17.2.0'

    implementation 'com.google.firebase:firebase-common:16.0.0'

    implementation 'androidx.multidex:multidex:2.0.1'
}

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion '28.0.3'
    ndkVersion "21.3.6528147"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
            res.srcDirs = [qt5AndroidDir + '/res', 'res']
            resources.srcDirs = ['resources']
            renderscript.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
       }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'rcc'
    }

    dexOptions {
        preDexLibraries = false
    }

    defaultConfig {
        applicationId "com.croyance.messenger"
        resConfig "en"
        minSdkVersion = qtMinSdkVersion
        targetSdkVersion = qtTargetSdkVersion
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
        }
    }


}

// Pre-experimental Gradle plug-in NDK boilerplate below.
// Check the Firebase C++ SDK location and NDK location...
project.ext {
// Configure the Firebase C++ SDK location.
    firebase_cpp_sdk_dir = System.getProperty('firebase_cpp_sdk.dir')
    firebaseSdkUsed = 'system property firebase_cpp_sdk.dir'
    println 'QtFirebase using Firebase C++ SDK located in ' + firebase_cpp_sdk_dir + ' (from ' + firebaseSdkUsed + ')'

    if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
        firebase_cpp_sdk_dir = System.getenv('FIREBASE_CPP_SDK_DIR')
        firebaseSdkUsed = 'system env variable FIREBASE_CPP_SDK_DIR'
        if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
            if ((new File('firebase_cpp_sdk')).exists()) {
                firebase_cpp_sdk_dir = 'firebase_cpp_sdk'
            } else {
                throw new StopActionException(
                    'firebase_cpp_sdk.dir property or the FIREBASE_CPP_SDK_DIR ' +
                    'environment variable must be set to reference the Firebase C++ ' +
                    'SDK install directory.  This is used to configure static library ' +
                    'and C/C++ include paths for the SDK.'
                )
            }
        }
    }

    if (!(new File(firebase_cpp_sdk_dir)).exists()) {
        throw new StopActionException(
            sprintf('Firebase C++ SDK directory %s does not exist', firebase_cpp_sdk_dir)
        )
    }
    println 'QtFirebase using Firebase C++ SDK located in ' + firebase_cpp_sdk_dir + ' (from ' + firebaseSdkUsed + ')'

    // Check the NDK location using the same configuration options as the
    // experimental Gradle plug-in.
    def ndkDir = android.ndkDirectory
    ndkUsed = 'android.ndkDirectory'

    if (ndkDir == null || !ndkDir.exists()) {
        ndkDir = new File(System.getProperty('ndk_dir'))
        ndkUsed = 'system property ndk_dir'
    }
    if (ndkDir == null || !ndkDir.exists()) {
        ndkDir = new File(System.getenv('ANDROID_NDK_HOME'))
        ndkUsed = 'system env variable ANDROID_NDK_HOME'
    }
    if (ndkDir == null || !ndkDir.exists()) {
        throw new StopActionException(
            'Android NDK directory should be specified using the ndkDir ' +
            'property or ANDROID_NDK_HOME environment variable.'
        )
    }
    println 'QtFirebase (Firebase C++ SDK) using Android NDK located in ' + ndkDir + ' (from ' + ndkUsed + ')'

}

repositories {
    flatDir {
        dirs project.ext.firebase_cpp_sdk_dir + "/libs/android"
    }
}


// No need for the admob dependencies
apply from: "${project.ext.firebase_cpp_sdk_dir}/Android/firebase_dependencies.gradle"
firebaseCpp.dependencies {
    analytics
    auth // auth / database
    database
    remoteConfig
    messaging
}

apply plugin: 'com.google.gms.google-services'
